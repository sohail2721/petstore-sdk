<?php

declare(strict_types=1);

/*
 * SwaggerPetstoreOpenAPI30Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerPetstoreOpenAPI30Lib\Tests\Controllers;

use SwaggerPetstoreOpenAPI30Lib\Controllers\PetController;
use SwaggerPetstoreOpenAPI30Lib\Exceptions;

class PetControllerTest extends BaseTestController
{
    /**
     * @var PetController PetController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getPetController();
    }

    public function testFindPetsByStatus()
    {
        // Parameters for the API call
        $status = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->findPetsByStatus($status);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testFindPetsByStatus1()
    {
        // Parameters for the API call
        $status = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->findPetsByStatus($status);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/xml', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testFindPetsByTags1()
    {
        // Parameters for the API call
        $tags = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->findPetsByTags($tags);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/xml', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testFindPetsByTags()
    {
        // Parameters for the API call
        $tags = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->findPetsByTags($tags);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testGetPetById1()
    {
        // Parameters for the API call
        $petId = 10;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->getPetById($petId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/xml', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testGetPetById()
    {
        // Parameters for the API call
        $petId = 10;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->getPetById($petId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testUpdatePetWithForm()
    {
        // Parameters for the API call
        $petId = 10;
        $name = null;
        $status = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->updatePetWithForm($petId, $name, $status);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testUpdatePetWithForm1()
    {
        // Parameters for the API call
        $petId = 10;
        $name = null;
        $status = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->updatePetWithForm($petId, $name, $status);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/xml', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testDeletePet()
    {
        // Parameters for the API call
        $petId = 10;
        $apiKey = null;

        // Perform API call
        try {
            self::$controller->deletePet($petId, $apiKey);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testUploadFile()
    {
        // Parameters for the API call
        $petId = 10;
        $additionalMetadata =
            null;
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->uploadFile($petId, $additionalMetadata, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }
}
