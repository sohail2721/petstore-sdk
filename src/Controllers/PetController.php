<?php

declare(strict_types=1);

/*
 * SwaggerPetstoreOpenAPI30Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerPetstoreOpenAPI30Lib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SwaggerPetstoreOpenAPI30Lib\Exceptions\ApiException;
use SwaggerPetstoreOpenAPI30Lib\Models\ApiResponse;
use SwaggerPetstoreOpenAPI30Lib\Models\Category;
use SwaggerPetstoreOpenAPI30Lib\Models\Pet;
use SwaggerPetstoreOpenAPI30Lib\Models\PetStatusEnum;
use SwaggerPetstoreOpenAPI30Lib\Models\Tag;
use SwaggerPetstoreOpenAPI30Lib\Utils\FileWrapper;

class PetController extends BaseController
{
    /**
     * Update an existing pet by Id.
     *
     * @param string $name
     * @param string[] $photoUrls
     * @param int|null $id
     * @param Category|null $category
     * @param Tag[]|null $tags
     * @param string|null $status pet status in the store
     *
     * @return Pet Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updatePet(
        string $name,
        array $photoUrls,
        ?int $id = null,
        ?Category $category = null,
        ?array $tags = null,
        ?string $status = null
    ): Pet {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/pet')
            ->auth('petstore_auth')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/x-www-form-urlencoded'),
                FormParam::init('name', $name),
                FormParam::init('photoUrls', $photoUrls),
                FormParam::init('id', $id),
                FormParam::init('category', $category),
                FormParam::init('tags', $tags),
                FormParam::init('status', $status)->serializeBy([PetStatusEnum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid ID supplied'))
            ->throwErrorOn('404', ErrorType::init('Pet not found'))
            ->throwErrorOn('422', ErrorType::init('Validation exception'))
            ->throwErrorOn('0', ErrorType::init('Unexpected error'))
            ->type(Pet::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Add a new pet to the store.
     *
     * @param string $name
     * @param string[] $photoUrls
     * @param int|null $id
     * @param Category|null $category
     * @param Tag[]|null $tags
     * @param string|null $status pet status in the store
     *
     * @return Pet Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function addPet(
        string $name,
        array $photoUrls,
        ?int $id = null,
        ?Category $category = null,
        ?array $tags = null,
        ?string $status = null
    ): Pet {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/pet')
            ->auth('petstore_auth')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/x-www-form-urlencoded'),
                FormParam::init('name', $name),
                FormParam::init('photoUrls', $photoUrls),
                FormParam::init('id', $id),
                FormParam::init('category', $category),
                FormParam::init('tags', $tags),
                FormParam::init('status', $status)->serializeBy([PetStatusEnum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid input'))
            ->throwErrorOn('422', ErrorType::init('Validation exception'))
            ->throwErrorOn('0', ErrorType::init('Unexpected error'))
            ->type(Pet::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Multiple status values can be provided with comma separated strings.
     *
     * @param string|null $status Status values that need to be considered for filter
     *
     * @return Pet[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function findPetsByStatus(?string $status = null): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/pet/findByStatus')
            ->auth('petstore_auth')
            ->parameters(QueryParam::init('status', $status)->serializeBy([PetStatusEnum::class, 'checkValue']));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid status value'))
            ->throwErrorOn('0', ErrorType::init('Unexpected error'))
            ->type(Pet::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @param string[]|null $tags Tags to filter by
     *
     * @return Pet[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function findPetsByTags(?array $tags = null): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/pet/findByTags')
            ->auth('petstore_auth')
            ->parameters(QueryParam::init('tags', $tags));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid tag value'))
            ->throwErrorOn('0', ErrorType::init('Unexpected error'))
            ->type(Pet::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a single pet.
     *
     * @param int $petId ID of pet to return
     *
     * @return Pet Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getPetById(int $petId): Pet
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/pet/{petId}')
            ->auth('api_key', 'petstore_auth')
            ->parameters(TemplateParam::init('petId', $petId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid ID supplied'))
            ->throwErrorOn('404', ErrorType::init('Pet not found'))
            ->throwErrorOn('0', ErrorType::init('Unexpected error'))
            ->type(Pet::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates a pet resource based on the form data.
     *
     * @param int $petId ID of pet that needs to be updated
     * @param string|null $name Name of pet that needs to be updated
     * @param string|null $status Status of pet that needs to be updated
     *
     * @return Pet Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updatePetWithForm(int $petId, ?string $name = null, ?string $status = null): Pet
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/pet/{petId}')
            ->auth('petstore_auth')
            ->parameters(
                TemplateParam::init('petId', $petId),
                QueryParam::init('name', $name),
                QueryParam::init('status', $status)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid input'))
            ->throwErrorOn('0', ErrorType::init('Unexpected error'))
            ->type(Pet::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete a pet.
     *
     * @param int $petId Pet id to delete
     * @param string|null $apiKey
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deletePet(int $petId, ?string $apiKey = null): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/pet/{petId}')
            ->auth('petstore_auth')
            ->parameters(TemplateParam::init('petId', $petId), HeaderParam::init('api_key', $apiKey));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid pet value'))
            ->throwErrorOn('0', ErrorType::init('Unexpected error'));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Upload image of the pet.
     *
     * @param int $petId ID of pet to update
     * @param string|null $additionalMetadata Additional Metadata
     * @param FileWrapper|null $body
     *
     * @return ApiResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadFile(int $petId, ?string $additionalMetadata = null, ?FileWrapper $body = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/pet/{petId}/uploadImage')
            ->auth('petstore_auth')
            ->parameters(
                TemplateParam::init('petId', $petId),
                HeaderParam::init('Content-Type', 'application/octet-stream'),
                QueryParam::init('additionalMetadata', $additionalMetadata),
                FormParam::init('body', $body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('No file uploaded'))
            ->throwErrorOn('404', ErrorType::init('Pet not found'))
            ->throwErrorOn('0', ErrorType::init('Unexpected error'))
            ->type(ApiResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
