<?php

declare(strict_types=1);

/*
 * SwaggerPetstoreOpenAPI30Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerPetstoreOpenAPI30Lib\Authentication;

use Core\Utils\CoreHelper;
use SwaggerPetstoreOpenAPI30Lib\Models\OAuthScopePetstoreAuthEnum;
use SwaggerPetstoreOpenAPI30Lib\Models\OAuthToken;

/**
 * Utility class for initializing PetstoreAuth security credentials.
 */
class PetstoreAuthCredentialsBuilder
{
    /**
     * @var array
     */
    private $config;

    private function __construct(array $config)
    {
        $this->config = $config;
    }

    /**
     * Initializer for PetstoreAuthCredentialsBuilder
     *
     * @param string $oAuthClientId
     * @param string $oAuthRedirectUri
     */
    public static function init(string $oAuthClientId, string $oAuthRedirectUri): self
    {
        return new self(['oAuthClientId' => $oAuthClientId, 'oAuthRedirectUri' => $oAuthRedirectUri]);
    }

    /**
     * Setter for OAuthClientId.
     *
     * @param string $oAuthClientId
     *
     * @return $this
     */
    public function oAuthClientId(string $oAuthClientId): self
    {
        $this->config['oAuthClientId'] = $oAuthClientId;
        return $this;
    }

    /**
     * Setter for OAuthRedirectUri.
     *
     * @param string $oAuthRedirectUri
     *
     * @return $this
     */
    public function oAuthRedirectUri(string $oAuthRedirectUri): self
    {
        $this->config['oAuthRedirectUri'] = $oAuthRedirectUri;
        return $this;
    }

    /**
     * Setter for OAuthToken.
     *
     * @param OAuthToken|null $oAuthToken
     *
     * @return $this
     */
    public function oAuthToken(?OAuthToken $oAuthToken): self
    {
        $this->config['oAuthToken'] = $oAuthToken;
        return $this;
    }

    /**
     * Setter for OAuthScopes.
     *
     * @param string[]|null $oAuthScopes
     *
     * @return $this
     */
    public function oAuthScopes(?array $oAuthScopes): self
    {
        OAuthScopePetstoreAuthEnum::checkValue($oAuthScopes);
        $this->config['oAuthScopes'] = $oAuthScopes;
        return $this;
    }

    /**
     * Setter for clock skew time in seconds applied while checking the OAuth Token expiry.
     *
     * @param int $oAuthClockSkew
     *
     * @return $this
     */
    public function oAuthClockSkew(int $oAuthClockSkew): self
    {
        $this->config['petstore_auth-ClockSkew'] = $oAuthClockSkew;
        return $this;
    }

    public function getConfiguration(): array
    {
        return CoreHelper::clone($this->config);
    }
}
